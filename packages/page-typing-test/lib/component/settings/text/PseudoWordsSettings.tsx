import { languageName } from "@keybr/intl";
import { Language } from "@keybr/layout";
import { Filter, type PhoneticModel } from "@keybr/phonetic-model";
import { PhoneticModelLoader } from "@keybr/phonetic-model-loader";
import { Field, FieldList, FieldSet, OptionList, Para } from "@keybr/widget";
import { type ReactNode } from "react";
import { useIntl } from "react-intl";
import { type PseudoWordsSource } from "../../../generator/index.ts";
import { type SettingsEditorProps } from "../types.ts";

export function PseudoWordsSettings({
  settings,
  patchSettings,
}: SettingsEditorProps): ReactNode {
  const { textSource } = settings as { readonly textSource: PseudoWordsSource };
  return (
    <PhoneticModelLoader language={textSource.language}>
      {(model) => (
        <Tab settings={settings} patchSettings={patchSettings} model={model} />
      )}
    </PhoneticModelLoader>
  );
}

function Tab({
  settings,
  patchSettings,
  model,
}: SettingsEditorProps & {
  readonly model: PhoneticModel;
}): ReactNode {
  const { formatMessage } = useIntl();
  const { textSource } = settings as { readonly textSource: PseudoWordsSource };
  const { letters } = model;
  const alphabet: string[] = letters.map(({ label }) => label);
  const words: string[] = [];
  for (let i = 0; i < 50; i++) {
    words.push(model.nextWord(Filter.empty));
  }
  return (
    <FieldSet legend="Pseudo words">
      <Para>
        Type pseudo words generated by an algorithm according to the phonetic
        rules of your language.
      </Para>

      <FieldList>
        <Field>
          {formatMessage({
            id: "settings.selectLanguageLabel",
            description: "Dropdown label.",
            defaultMessage: "Language:",
          })}
        </Field>

        <Field>
          <OptionList
            options={Language.ALL.map((item) => ({
              value: item.id,
              name: formatMessage(languageName(item.id)),
            }))}
            title={formatMessage({
              id: "settings.selectLanguageTitle",
              description: "Dropdown title.",
              defaultMessage: "Select your spoken language.",
            })}
            value={textSource.language.id}
            onSelect={(id) => {
              patchSettings({
                ...settings,
                textSource: {
                  ...textSource,
                  language: Language.ALL.find((item) => item.id === id)!,
                },
              });
            }}
          />
        </Field>
      </FieldList>

      <FieldList>
        <Field>Alphabet:</Field>
        <Field>
          <em>{alphabet.join("")}</em>
        </Field>
      </FieldList>

      <FieldList>
        <Field>Example:</Field>
        <Field>
          <em>{words.join(" ")}</em>
        </Field>
      </FieldList>
    </FieldSet>
  );
}
