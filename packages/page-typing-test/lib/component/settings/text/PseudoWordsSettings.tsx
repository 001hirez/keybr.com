import { languageName } from "@keybr/intl";
import { Language } from "@keybr/layout";
import { Filter, type PhoneticModel } from "@keybr/phonetic-model";
import { PhoneticModelLoader } from "@keybr/phonetic-model-loader";
import { useSettings } from "@keybr/settings";
import { Field, FieldList, FieldSet, OptionList, Para } from "@keybr/widget";
import { type ReactNode } from "react";
import { useIntl } from "react-intl";
import { typingTestProps } from "../../../settings.ts";

export function PseudoWordsSettings(): ReactNode {
  const { settings } = useSettings();
  return (
    <PhoneticModelLoader language={settings.get(typingTestProps.language)}>
      {(model) => <Content model={model} />}
    </PhoneticModelLoader>
  );
}

function Content({ model }: { readonly model: PhoneticModel }): ReactNode {
  const { settings, updateSettings } = useSettings();
  const { formatMessage } = useIntl();
  const alphabet: string[] = model.letters.map(({ label }) => label);
  const words: string[] = [];
  for (let i = 0; i < 50; i++) {
    words.push(model.nextWord(Filter.empty));
  }
  return (
    <FieldSet legend="Pseudo words">
      <Para>
        Type pseudo words generated by an algorithm according to the phonetic
        rules of your language.
      </Para>

      <FieldList>
        <Field>
          {formatMessage({
            id: "keyboard.language.label",
            description: "Widget name.",
            defaultMessage: "Language:",
          })}
        </Field>

        <Field>
          <OptionList
            options={Language.ALL.map((item) => ({
              value: item.id,
              name: formatMessage(languageName(item.id)),
            }))}
            value={String(settings.get(typingTestProps.language))}
            onSelect={(id) => {
              updateSettings(
                settings.set(typingTestProps.language, Language.ALL.get(id)),
              );
            }}
          />
        </Field>
      </FieldList>

      <FieldList>
        <Field>Alphabet:</Field>
        <Field>
          <em>{alphabet.join("")}</em>
        </Field>
      </FieldList>

      <FieldList>
        <Field>Example:</Field>
        <Field>
          <em>{words.join(" ")}</em>
        </Field>
      </FieldList>
    </FieldSet>
  );
}
